---
description: ai-shell开发规范
globs: 
alwaysApply: false
---
---
description: 
globs: 
---
---
description: this project rule
globs: 
---
---
description: AI智能SSH助手项目规范与指南
globs: ["**/*.{ts,tsx,js,jsx,css}"]
---

# 开发规范

开发前阅读 [AI-SSH-TOOL-SPEC.md](mdc:docs/AI-SSH-TOOL-SPEC.md)  [PROGRESS.md](mdc:docs/PROGRESS.md) , [要求](mdc:要求), [经验.md](mdc:docs/LessonsLearned/经验.md) 熟悉项目情况和进度，阅读完后询问用户当前想要专注于什么功能。
重点：写代码之前一定要思考全文并设计方案与用户沟通是否可行才能操作。
强制：一定要以大型项目来规划文件目录、文件名、架构、功能设计等。不可单一考虑
1. 代码组织
   - 功能模块清晰分包，单文件不超过200行，超过了要注意新功能尽量抽取
   - 文件命名需包含模块/功能名，避免单一的index/style/types
   - 每个步骤尽量添加注释，至少有个说明是干嘛的，也不用太详细
   - 被注释的代码保留，不删除
   - 新功能文件要有自己的文件目录或者子目录，更加规范
   - css 采用 BEM (Block Element Modifier) 命名规范

2. 技术栈
   - 前端：Electron + React + TypeScript + Ant Design
   - 终端：Xterm.js、文件管理器、可视化指标等
   - 后端：OpenAI API + SSH2 + SQLite

3. 性能要求
   - 命令响应 <100ms
   - AI响应 <2s
   - CPU使用率 <10%

# 功能开发

1. 核心功能
   - 智能命令助手（自然语言交互、命令解释）
   - SSH终端（连接管理、文件传输、多会话）
   - 现代化界面（三栏布局、主题定制）

# 开发流程

1. 代码修改原则
   - 只修改任务相关代码
   - 不涉及的代码保持原样

2. 功能实现步骤
   - 完成后执行npm start测试
   - 确认正常后更新进度文件
   - 按任务顺序逐个开发
   - 
3. 开发要求
   - 在此记录项目开发过程中的经验教训,都要写入到 @经验.md中，写入前需要问我，每次开发前都看下。
4. 反复出现修复不了的问题，总结前面的改动，重新梳理代码流程，尝试不同方向的思路，重新读文件，主动加日志，让用户发给你帮助排查问题。

5.不需要你启动软件，告诉用户改完了就行。





